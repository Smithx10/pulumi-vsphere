# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class DatastoreClusterVmAntiAffinityRule(pulumi.CustomResource):
    """
    The `vsphere_datastore_cluster_vm_anti_affinity_rule` resource can be used to
    manage VM anti-affinity rules in a datastore cluster, either created by the
    [`vsphere_datastore_cluster`][tf-vsphere-datastore-cluster-resource] resource or looked up
    by the [`vsphere_datastore_cluster`][tf-vsphere-datastore-cluster-data-source] data source.
    
    [tf-vsphere-datastore-cluster-resource]: /docs/providers/vsphere/r/datastore_cluster.html
    [tf-vsphere-datastore-cluster-data-source]: /docs/providers/vsphere/d/datastore_cluster.html
    
    This rule can be used to tell a set to virtual machines to run on different
    datastores within a cluster, useful for preventing single points of failure in
    application cluster scenarios. When configured, Storage DRS will make a best effort to
    ensure that the virtual machines run on different datastores, or prevent any
    operation that would keep that from happening, depending on the value of the
    `mandatory` flag.
    
    ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
    connections.
    
    ~> **NOTE:** Storage DRS requires a vSphere Enterprise Plus license.
    """
    def __init__(__self__, __name__, __opts__=None, datastore_cluster_id=None, enabled=None, mandatory=None, name=None, virtual_machine_ids=None):
        """Create a DatastoreClusterVmAntiAffinityRule resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not datastore_cluster_id:
            raise TypeError('Missing required property datastore_cluster_id')
        elif not isinstance(datastore_cluster_id, basestring):
            raise TypeError('Expected property datastore_cluster_id to be a basestring')
        __self__.datastore_cluster_id = datastore_cluster_id
        """
        The [managed object reference
        ID][docs-about-morefs] of the datastore cluster to put the group in.  Forces
        a new resource if changed.
        """
        __props__['datastoreClusterId'] = datastore_cluster_id

        if enabled and not isinstance(enabled, bool):
            raise TypeError('Expected property enabled to be a bool')
        __self__.enabled = enabled
        """
        Enable this rule in the cluster. Default: `true`.
        """
        __props__['enabled'] = enabled

        if mandatory and not isinstance(mandatory, bool):
            raise TypeError('Expected property mandatory to be a bool')
        __self__.mandatory = mandatory
        """
        When this value is `true`, prevents any virtual
        machine operations that may violate this rule. Default: `false`.
        """
        __props__['mandatory'] = mandatory

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the rule. This must be unique in the cluster.
        """
        __props__['name'] = name

        if not virtual_machine_ids:
            raise TypeError('Missing required property virtual_machine_ids')
        elif not isinstance(virtual_machine_ids, list):
            raise TypeError('Expected property virtual_machine_ids to be a list')
        __self__.virtual_machine_ids = virtual_machine_ids
        """
        The UUIDs of the virtual machines to run
        on different datastores from each other.
        """
        __props__['virtualMachineIds'] = virtual_machine_ids

        super(DatastoreClusterVmAntiAffinityRule, __self__).__init__(
            'vsphere:index/datastoreClusterVmAntiAffinityRule:DatastoreClusterVmAntiAffinityRule',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'datastoreClusterId' in outs:
            self.datastore_cluster_id = outs['datastoreClusterId']
        if 'enabled' in outs:
            self.enabled = outs['enabled']
        if 'mandatory' in outs:
            self.mandatory = outs['mandatory']
        if 'name' in outs:
            self.name = outs['name']
        if 'virtualMachineIds' in outs:
            self.virtual_machine_ids = outs['virtualMachineIds']
