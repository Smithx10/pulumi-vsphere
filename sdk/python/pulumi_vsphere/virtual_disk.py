# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class VirtualDisk(pulumi.CustomResource):
    """
    The `vsphere_virtual_disk` resource can be used to create virtual disks outside
    of any given [`vsphere_virtual_machine`][docs-vsphere-virtual-machine]
    resource. These disks can be attached to a virtual machine by creating a disk
    block with the [`attach`][docs-vsphere-virtual-machine-disk-attach] parameter.
    
    [docs-vsphere-virtual-machine]: /docs/providers/vsphere/r/virtual_machine.html
    [docs-vsphere-virtual-machine-disk-attach]: /docs/providers/vsphere/r/virtual_machine.html#attach
    """
    def __init__(__self__, __name__, __opts__=None, adapter_type=None, create_directories=None, datacenter=None, datastore=None, size=None, type=None, vmdk_path=None):
        """Create a VirtualDisk resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if adapter_type and not isinstance(adapter_type, basestring):
            raise TypeError('Expected property adapter_type to be a basestring')
        __self__.adapter_type = adapter_type
        """
        The adapter type for this virtual disk. Can be
        one of `ide`, `lsiLogic`, or `busLogic`.  Default: `lsiLogic`.
        """
        __props__['adapterType'] = adapter_type

        if create_directories and not isinstance(create_directories, bool):
            raise TypeError('Expected property create_directories to be a bool')
        __self__.create_directories = create_directories
        """
        Tells the resource to create any
        directories that are a part of the `vmdk_path` parameter if they are missing.
        Default: `false`.
        """
        __props__['createDirectories'] = create_directories

        if datacenter and not isinstance(datacenter, basestring):
            raise TypeError('Expected property datacenter to be a basestring')
        __self__.datacenter = datacenter
        """
        The name of the datacenter in which to create the
        disk. Can be omitted when when ESXi or if there is only one datacenter in
        your infrastructure.
        """
        __props__['datacenter'] = datacenter

        if not datastore:
            raise TypeError('Missing required property datastore')
        elif not isinstance(datastore, basestring):
            raise TypeError('Expected property datastore to be a basestring')
        __self__.datastore = datastore
        """
        The name of the datastore in which to create the
        disk.
        """
        __props__['datastore'] = datastore

        if not size:
            raise TypeError('Missing required property size')
        elif not isinstance(size, int):
            raise TypeError('Expected property size to be a int')
        __self__.size = size
        """
        Size of the disk (in GB).
        """
        __props__['size'] = size

        if type and not isinstance(type, basestring):
            raise TypeError('Expected property type to be a basestring')
        __self__.type = type
        """
        The type of disk to create. Can be one of
        `eagerZeroedThick`, `lazy`, or `thin`. Default: `eagerZeroedThick`. For
        information on what each kind of disk provisioning policy means, click
        [here][docs-vmware-vm-disk-provisioning].
        """
        __props__['type'] = type

        if not vmdk_path:
            raise TypeError('Missing required property vmdk_path')
        elif not isinstance(vmdk_path, basestring):
            raise TypeError('Expected property vmdk_path to be a basestring')
        __self__.vmdk_path = vmdk_path
        """
        The path, including filename, of the virtual disk to
        be created.  This needs to end in `.vmdk`.
        """
        __props__['vmdkPath'] = vmdk_path

        super(VirtualDisk, __self__).__init__(
            'vsphere:index/virtualDisk:VirtualDisk',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'adapterType' in outs:
            self.adapter_type = outs['adapterType']
        if 'createDirectories' in outs:
            self.create_directories = outs['createDirectories']
        if 'datacenter' in outs:
            self.datacenter = outs['datacenter']
        if 'datastore' in outs:
            self.datastore = outs['datastore']
        if 'size' in outs:
            self.size = outs['size']
        if 'type' in outs:
            self.type = outs['type']
        if 'vmdkPath' in outs:
            self.vmdk_path = outs['vmdkPath']
