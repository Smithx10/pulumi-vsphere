# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class ComputeClusterVmHostRule(pulumi.CustomResource):
    """
    The `vsphere_compute_cluster_vm_host_rule` resource can be used to manage
    VM-to-host rules in a cluster, either created by the
    [`vsphere_compute_cluster`][tf-vsphere-cluster-resource] resource or looked up
    by the [`vsphere_compute_cluster`][tf-vsphere-cluster-data-source] data source.
    
    [tf-vsphere-cluster-resource]: /docs/providers/vsphere/r/compute_cluster.html
    [tf-vsphere-cluster-data-source]: /docs/providers/vsphere/d/compute_cluster.html
    
    This resource can create both _affinity rules_, where virtual machines run on
    specified hosts, or _anti-affinity_ rules, where virtual machines run on hosts
    outside of the ones specified in the rule. Virtual machines and hosts are
    supplied via groups, which can be managed via the
    [`vsphere_compute_cluster_vm_group`][tf-vsphere-cluster-vm-group-resource] and
    [`vsphere_compute_cluster_host_group`][tf-vsphere-cluster-host-group-resource]
    resources.
    
    [tf-vsphere-cluster-vm-group-resource]: /docs/providers/vsphere/r/compute_cluster_vm_group.html
    [tf-vsphere-cluster-host-group-resource]: /docs/providers/vsphere/r/compute_cluster_host_group.html
    
    ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
    connections.
    
    ~> **NOTE:** vSphere DRS requires a vSphere Enterprise Plus license.
    """
    def __init__(__self__, __name__, __opts__=None, affinity_host_group_name=None, anti_affinity_host_group_name=None, compute_cluster_id=None, enabled=None, mandatory=None, name=None, vm_group_name=None):
        """Create a ComputeClusterVmHostRule resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if affinity_host_group_name and not isinstance(affinity_host_group_name, basestring):
            raise TypeError('Expected property affinity_host_group_name to be a basestring')
        __self__.affinity_host_group_name = affinity_host_group_name
        """
        When this field is used, the virtual
        machines defined in `vm_group_name` will be run on the
        hosts defined in this host group.
        """
        __props__['affinityHostGroupName'] = affinity_host_group_name

        if anti_affinity_host_group_name and not isinstance(anti_affinity_host_group_name, basestring):
            raise TypeError('Expected property anti_affinity_host_group_name to be a basestring')
        __self__.anti_affinity_host_group_name = anti_affinity_host_group_name
        """
        When this field is used, the
        virtual machines defined in `vm_group_name` will _not_ be
        run on the hosts defined in this host group.
        """
        __props__['antiAffinityHostGroupName'] = anti_affinity_host_group_name

        if not compute_cluster_id:
            raise TypeError('Missing required property compute_cluster_id')
        elif not isinstance(compute_cluster_id, basestring):
            raise TypeError('Expected property compute_cluster_id to be a basestring')
        __self__.compute_cluster_id = compute_cluster_id
        """
        The [managed object reference
        ID][docs-about-morefs] of the cluster to put the group in.  Forces a new
        resource if changed.
        """
        __props__['computeClusterId'] = compute_cluster_id

        if enabled and not isinstance(enabled, bool):
            raise TypeError('Expected property enabled to be a bool')
        __self__.enabled = enabled
        """
        Enable this rule in the cluster. Default: `true`.
        """
        __props__['enabled'] = enabled

        if mandatory and not isinstance(mandatory, bool):
            raise TypeError('Expected property mandatory to be a bool')
        __self__.mandatory = mandatory
        """
        When this value is `true`, prevents any virtual
        machine operations that may violate this rule. Default: `false`.
        """
        __props__['mandatory'] = mandatory

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the rule. This must be unique in the
        cluster.
        """
        __props__['name'] = name

        if not vm_group_name:
            raise TypeError('Missing required property vm_group_name')
        elif not isinstance(vm_group_name, basestring):
            raise TypeError('Expected property vm_group_name to be a basestring')
        __self__.vm_group_name = vm_group_name
        """
        The name of the virtual machine group to use
        with this rule.
        """
        __props__['vmGroupName'] = vm_group_name

        super(ComputeClusterVmHostRule, __self__).__init__(
            'vsphere:index/computeClusterVmHostRule:ComputeClusterVmHostRule',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'affinityHostGroupName' in outs:
            self.affinity_host_group_name = outs['affinityHostGroupName']
        if 'antiAffinityHostGroupName' in outs:
            self.anti_affinity_host_group_name = outs['antiAffinityHostGroupName']
        if 'computeClusterId' in outs:
            self.compute_cluster_id = outs['computeClusterId']
        if 'enabled' in outs:
            self.enabled = outs['enabled']
        if 'mandatory' in outs:
            self.mandatory = outs['mandatory']
        if 'name' in outs:
            self.name = outs['name']
        if 'vmGroupName' in outs:
            self.vm_group_name = outs['vmGroupName']
