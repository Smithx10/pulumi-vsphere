# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class File(pulumi.CustomResource):
    """
    The `vsphere_file` resource can be used to upload files (such as virtual disk
    files) from the host machine that Terraform is running on to a target
    datastore.  The resource can also be used to copy files between datastores, or
    from one location to another on the same datastore.
    
    Updates to destination parameters such as `datacenter`, `datastore`, or
    `destination_file` will move the managed file a new destination based on the
    values of the new settings.  If any source parameter is changed, such as
    `source_datastore`, `source_datacenter` or `source_file`), the resource will be
    re-created. Depending on if destination parameters are being changed as well,
    this may result in the destination file either being overwritten or deleted at
    the old location.
    """
    def __init__(__self__, __name__, __opts__=None, create_directories=None, datacenter=None, datastore=None, destination_file=None, source_datacenter=None, source_datastore=None, source_file=None):
        """Create a File resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if create_directories and not isinstance(create_directories, bool):
            raise TypeError('Expected property create_directories to be a bool')
        __self__.create_directories = create_directories
        """
        Create directories in `destination_file`
        path parameter if any missing for copy operation.
        """
        __props__['createDirectories'] = create_directories

        if datacenter and not isinstance(datacenter, basestring):
            raise TypeError('Expected property datacenter to be a basestring')
        __self__.datacenter = datacenter
        """
        The name of a datacenter in which the file will be
        uploaded to.
        """
        __props__['datacenter'] = datacenter

        if not datastore:
            raise TypeError('Missing required property datastore')
        elif not isinstance(datastore, basestring):
            raise TypeError('Expected property datastore to be a basestring')
        __self__.datastore = datastore
        """
        The name of the datastore in which to upload the
        file to.
        """
        __props__['datastore'] = datastore

        if not destination_file:
            raise TypeError('Missing required property destination_file')
        elif not isinstance(destination_file, basestring):
            raise TypeError('Expected property destination_file to be a basestring')
        __self__.destination_file = destination_file
        """
        The path to where the file should be uploaded
        or copied to on vSphere.
        """
        __props__['destinationFile'] = destination_file

        if source_datacenter and not isinstance(source_datacenter, basestring):
            raise TypeError('Expected property source_datacenter to be a basestring')
        __self__.source_datacenter = source_datacenter
        """
        The name of a datacenter in which the file
        will be copied from. Forces a new resource if changed.
        """
        __props__['sourceDatacenter'] = source_datacenter

        if source_datastore and not isinstance(source_datastore, basestring):
            raise TypeError('Expected property source_datastore to be a basestring')
        __self__.source_datastore = source_datastore
        """
        The name of the datastore in which file will
        be copied from. Forces a new resource if changed.
        """
        __props__['sourceDatastore'] = source_datastore

        if not source_file:
            raise TypeError('Missing required property source_file')
        elif not isinstance(source_file, basestring):
            raise TypeError('Expected property source_file to be a basestring')
        __self__.source_file = source_file
        """
        The path to the file being uploaded from the
        Terraform host to vSphere or copied within vSphere. Forces a new resource if
        changed.
        """
        __props__['sourceFile'] = source_file

        super(File, __self__).__init__(
            'vsphere:index/file:File',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'createDirectories' in outs:
            self.create_directories = outs['createDirectories']
        if 'datacenter' in outs:
            self.datacenter = outs['datacenter']
        if 'datastore' in outs:
            self.datastore = outs['datastore']
        if 'destinationFile' in outs:
            self.destination_file = outs['destinationFile']
        if 'sourceDatacenter' in outs:
            self.source_datacenter = outs['sourceDatacenter']
        if 'sourceDatastore' in outs:
            self.source_datastore = outs['sourceDatastore']
        if 'sourceFile' in outs:
            self.source_file = outs['sourceFile']
