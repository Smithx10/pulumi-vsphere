# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class VappContainer(pulumi.CustomResource):
    """
    The `vsphere_vapp_container` resource can be used to create and manage
    vApps.
    
    For more information on vSphere vApps, see [this
    page][ref-vsphere-vapp].
    
    [ref-vsphere-vapp]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vm_admin.doc/GUID-2A95EBB8-1779-40FA-B4FB-4D0845750879.html
    """
    def __init__(__self__, __name__, __opts__=None, cpu_expandable=None, cpu_limit=None, cpu_reservation=None, cpu_share_level=None, cpu_shares=None, custom_attributes=None, memory_expandable=None, memory_limit=None, memory_reservation=None, memory_share_level=None, memory_shares=None, name=None, parent_folder_id=None, parent_resource_pool_id=None, tags=None):
        """Create a VappContainer resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if cpu_expandable and not isinstance(cpu_expandable, bool):
            raise TypeError('Expected property cpu_expandable to be a bool')
        __self__.cpu_expandable = cpu_expandable
        """
        Determines if the reservation on a vApp
        container can grow beyond the specified value if the parent resource pool has
        unreserved resources. Default: `true`
        """
        __props__['cpuExpandable'] = cpu_expandable

        if cpu_limit and not isinstance(cpu_limit, int):
            raise TypeError('Expected property cpu_limit to be a int')
        __self__.cpu_limit = cpu_limit
        """
        The CPU utilization of a vApp container will not
        exceed this limit, even if there are available resources. Set to `-1` for
        unlimited.
        Default: `-1`
        """
        __props__['cpuLimit'] = cpu_limit

        if cpu_reservation and not isinstance(cpu_reservation, int):
            raise TypeError('Expected property cpu_reservation to be a int')
        __self__.cpu_reservation = cpu_reservation
        """
        Amount of CPU (MHz) that is guaranteed
        available to the vApp container. Default: `0`
        """
        __props__['cpuReservation'] = cpu_reservation

        if cpu_share_level and not isinstance(cpu_share_level, basestring):
            raise TypeError('Expected property cpu_share_level to be a basestring')
        __self__.cpu_share_level = cpu_share_level
        """
        The CPU allocation level. The level is a
        simplified view of shares. Levels map to a pre-determined set of numeric
        values for shares. Can be one of `low`, `normal`, `high`, or `custom`. When
        `low`, `normal`, or `high` are specified values in `cpu_shares` will be
        ignored.  Default: `normal`
        """
        __props__['cpuShareLevel'] = cpu_share_level

        if cpu_shares and not isinstance(cpu_shares, int):
            raise TypeError('Expected property cpu_shares to be a int')
        __self__.cpu_shares = cpu_shares
        """
        The number of shares allocated for CPU. Used to
        determine resource allocation in case of resource contention. If this is set,
        `cpu_share_level` must be `custom`.
        """
        __props__['cpuShares'] = cpu_shares

        if custom_attributes and not isinstance(custom_attributes, dict):
            raise TypeError('Expected property custom_attributes to be a dict')
        __self__.custom_attributes = custom_attributes
        """
        A list of custom attributes to set on this resource.
        """
        __props__['customAttributes'] = custom_attributes

        if memory_expandable and not isinstance(memory_expandable, bool):
            raise TypeError('Expected property memory_expandable to be a bool')
        __self__.memory_expandable = memory_expandable
        """
        Determines if the reservation on a vApp
        container can grow beyond the specified value if the parent resource pool has
        unreserved resources. Default: `true`
        """
        __props__['memoryExpandable'] = memory_expandable

        if memory_limit and not isinstance(memory_limit, int):
            raise TypeError('Expected property memory_limit to be a int')
        __self__.memory_limit = memory_limit
        """
        The CPU utilization of a vApp container will not
        exceed this limit, even if there are available resources. Set to `-1` for
        unlimited.
        Default: `-1`
        """
        __props__['memoryLimit'] = memory_limit

        if memory_reservation and not isinstance(memory_reservation, int):
            raise TypeError('Expected property memory_reservation to be a int')
        __self__.memory_reservation = memory_reservation
        """
        Amount of CPU (MHz) that is guaranteed
        available to the vApp container. Default: `0`
        """
        __props__['memoryReservation'] = memory_reservation

        if memory_share_level and not isinstance(memory_share_level, basestring):
            raise TypeError('Expected property memory_share_level to be a basestring')
        __self__.memory_share_level = memory_share_level
        """
        The CPU allocation level. The level is a
        simplified view of shares. Levels map to a pre-determined set of numeric
        values for shares. Can be one of `low`, `normal`, `high`, or `custom`. When
        `low`, `normal`, or `high` are specified values in `memory_shares` will be
        ignored.  Default: `normal`
        """
        __props__['memoryShareLevel'] = memory_share_level

        if memory_shares and not isinstance(memory_shares, int):
            raise TypeError('Expected property memory_shares to be a int')
        __self__.memory_shares = memory_shares
        """
        The number of shares allocated for CPU. Used to
        determine resource allocation in case of resource contention. If this is set,
        `memory_share_level` must be `custom`.
        """
        __props__['memoryShares'] = memory_shares

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the vApp container.
        """
        __props__['name'] = name

        if parent_folder_id and not isinstance(parent_folder_id, basestring):
            raise TypeError('Expected property parent_folder_id to be a basestring')
        __self__.parent_folder_id = parent_folder_id
        """
        The [managed object ID][docs-about-morefs] of
        the vApp container's parent folder.
        """
        __props__['parentFolderId'] = parent_folder_id

        if not parent_resource_pool_id:
            raise TypeError('Missing required property parent_resource_pool_id')
        elif not isinstance(parent_resource_pool_id, basestring):
            raise TypeError('Expected property parent_resource_pool_id to be a basestring')
        __self__.parent_resource_pool_id = parent_resource_pool_id
        """
        The [managed object ID][docs-about-morefs]
        of the parent resource pool. This can be the root resource pool for a cluster
        or standalone host, or a resource pool itself. When moving a vApp container
        from one parent resource pool to another, both must share a common root
        resource pool or the move will fail.
        """
        __props__['parentResourcePoolId'] = parent_resource_pool_id

        if tags and not isinstance(tags, list):
            raise TypeError('Expected property tags to be a list')
        __self__.tags = tags
        """
        The IDs of any tags to attach to this resource. See
        [here][docs-applying-tags] for a reference on how to apply tags.
        """
        __props__['tags'] = tags

        super(VappContainer, __self__).__init__(
            'vsphere:index/vappContainer:VappContainer',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'cpuExpandable' in outs:
            self.cpu_expandable = outs['cpuExpandable']
        if 'cpuLimit' in outs:
            self.cpu_limit = outs['cpuLimit']
        if 'cpuReservation' in outs:
            self.cpu_reservation = outs['cpuReservation']
        if 'cpuShareLevel' in outs:
            self.cpu_share_level = outs['cpuShareLevel']
        if 'cpuShares' in outs:
            self.cpu_shares = outs['cpuShares']
        if 'customAttributes' in outs:
            self.custom_attributes = outs['customAttributes']
        if 'memoryExpandable' in outs:
            self.memory_expandable = outs['memoryExpandable']
        if 'memoryLimit' in outs:
            self.memory_limit = outs['memoryLimit']
        if 'memoryReservation' in outs:
            self.memory_reservation = outs['memoryReservation']
        if 'memoryShareLevel' in outs:
            self.memory_share_level = outs['memoryShareLevel']
        if 'memoryShares' in outs:
            self.memory_shares = outs['memoryShares']
        if 'name' in outs:
            self.name = outs['name']
        if 'parentFolderId' in outs:
            self.parent_folder_id = outs['parentFolderId']
        if 'parentResourcePoolId' in outs:
            self.parent_resource_pool_id = outs['parentResourcePoolId']
        if 'tags' in outs:
            self.tags = outs['tags']
