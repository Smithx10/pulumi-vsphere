# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class HaVmOverride(pulumi.CustomResource):
    """
    The `vsphere_ha_vm_override` resource can be used to add an override for
    vSphere HA settings on a cluster for a specific virtual machine. With this
    resource, one can control specific HA settings so that they are different than
    the cluster default, accommodating the needs of that specific virtual machine,
    while not affecting the rest of the cluster.
    
    For more information on vSphere HA, see [this page][ref-vsphere-ha-clusters].
    
    [ref-vsphere-ha-clusters]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.avail.doc/GUID-5432CA24-14F1-44E3-87FB-61D937831CF6.html
    
    ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
    connections.
    """
    def __init__(__self__, __name__, __opts__=None, compute_cluster_id=None, ha_datastore_apd_recovery_action=None, ha_datastore_apd_response=None, ha_datastore_apd_response_delay=None, ha_datastore_pdl_response=None, ha_host_isolation_response=None, ha_vm_failure_interval=None, ha_vm_maximum_failure_window=None, ha_vm_maximum_resets=None, ha_vm_minimum_uptime=None, ha_vm_monitoring=None, ha_vm_monitoring_use_cluster_defaults=None, ha_vm_restart_priority=None, ha_vm_restart_timeout=None, virtual_machine_id=None):
        """Create a HaVmOverride resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not compute_cluster_id:
            raise TypeError('Missing required property compute_cluster_id')
        elif not isinstance(compute_cluster_id, basestring):
            raise TypeError('Expected property compute_cluster_id to be a basestring')
        __self__.compute_cluster_id = compute_cluster_id
        """
        The [managed object reference
        ID][docs-about-morefs] of the cluster to put the override in.  Forces a new
        resource if changed.
        """
        __props__['computeClusterId'] = compute_cluster_id

        if ha_datastore_apd_recovery_action and not isinstance(ha_datastore_apd_recovery_action, basestring):
            raise TypeError('Expected property ha_datastore_apd_recovery_action to be a basestring')
        __self__.ha_datastore_apd_recovery_action = ha_datastore_apd_recovery_action
        """
        Controls the action to take
        on this virtual machine if an APD status on an affected datastore clears in
        the middle of an APD event. Can be one of `useClusterDefault`, `none` or
        `reset`.  Default: `useClusterDefault`.
        <sup>[\*][tf-vsphere-cluster-resource-version-restrictions]</sup>
        """
        __props__['haDatastoreApdRecoveryAction'] = ha_datastore_apd_recovery_action

        if ha_datastore_apd_response and not isinstance(ha_datastore_apd_response, basestring):
            raise TypeError('Expected property ha_datastore_apd_response to be a basestring')
        __self__.ha_datastore_apd_response = ha_datastore_apd_response
        """
        Controls the action to take on this
        virtual machine when the cluster has detected loss to all paths to a relevant
        datastore. Can be one of `clusterDefault`, `disabled`, `warning`,
        `restartConservative`, or `restartAggressive`.  Default: `clusterDefault`.
        <sup>[\*][tf-vsphere-cluster-resource-version-restrictions]</sup>
        """
        __props__['haDatastoreApdResponse'] = ha_datastore_apd_response

        if ha_datastore_apd_response_delay and not isinstance(ha_datastore_apd_response_delay, int):
            raise TypeError('Expected property ha_datastore_apd_response_delay to be a int')
        __self__.ha_datastore_apd_response_delay = ha_datastore_apd_response_delay
        """
        Controls the delay in minutes
        to wait after an APD timeout event to execute the response action defined in
        `ha_datastore_apd_response`. Use `-1` to use
        the cluster default. Default: `-1`.
        <sup>[\*][tf-vsphere-cluster-resource-version-restrictions]</sup>
        """
        __props__['haDatastoreApdResponseDelay'] = ha_datastore_apd_response_delay

        if ha_datastore_pdl_response and not isinstance(ha_datastore_pdl_response, basestring):
            raise TypeError('Expected property ha_datastore_pdl_response to be a basestring')
        __self__.ha_datastore_pdl_response = ha_datastore_pdl_response
        """
        Controls the action to take on this
        virtual machine when the cluster has detected a permanent device loss to a
        relevant datastore. Can be one of `clusterDefault`, `disabled`, `warning`, or
        `restartAggressive`. Default: `clusterDefault`.
        <sup>[\*][tf-vsphere-cluster-resource-version-restrictions]</sup>
        """
        __props__['haDatastorePdlResponse'] = ha_datastore_pdl_response

        if ha_host_isolation_response and not isinstance(ha_host_isolation_response, basestring):
            raise TypeError('Expected property ha_host_isolation_response to be a basestring')
        __self__.ha_host_isolation_response = ha_host_isolation_response
        """
        The action to take on this virtual
        machine when a host has detected that it has been isolated from the rest of
        the cluster. Can be one of `clusterIsolationResponse`, `none`, `powerOff`, or
        `shutdown`. Default: `clusterIsolationResponse`.
        """
        __props__['haHostIsolationResponse'] = ha_host_isolation_response

        if ha_vm_failure_interval and not isinstance(ha_vm_failure_interval, int):
            raise TypeError('Expected property ha_vm_failure_interval to be a int')
        __self__.ha_vm_failure_interval = ha_vm_failure_interval
        """
        If a heartbeat from this virtual
        machine is not received within this configured interval, the virtual machine
        is marked as failed. The value is in seconds. Default: `30`.
        """
        __props__['haVmFailureInterval'] = ha_vm_failure_interval

        if ha_vm_maximum_failure_window and not isinstance(ha_vm_maximum_failure_window, int):
            raise TypeError('Expected property ha_vm_maximum_failure_window to be a int')
        __self__.ha_vm_maximum_failure_window = ha_vm_maximum_failure_window
        """
        The length of the reset window in
        which `ha_vm_maximum_resets` can operate. When this
        window expires, no more resets are attempted regardless of the setting
        configured in `ha_vm_maximum_resets`. `-1` means no window, meaning an
        unlimited reset time is allotted. The value is specified in seconds. Default:
        `-1` (no window).
        """
        __props__['haVmMaximumFailureWindow'] = ha_vm_maximum_failure_window

        if ha_vm_maximum_resets and not isinstance(ha_vm_maximum_resets, int):
            raise TypeError('Expected property ha_vm_maximum_resets to be a int')
        __self__.ha_vm_maximum_resets = ha_vm_maximum_resets
        """
        The maximum number of resets that HA will
        perform to this virtual machine when responding to a failure event. Default:
        `3`
        """
        __props__['haVmMaximumResets'] = ha_vm_maximum_resets

        if ha_vm_minimum_uptime and not isinstance(ha_vm_minimum_uptime, int):
            raise TypeError('Expected property ha_vm_minimum_uptime to be a int')
        __self__.ha_vm_minimum_uptime = ha_vm_minimum_uptime
        """
        The time, in seconds, that HA waits after
        powering on this virtual machine before monitoring for heartbeats. Default:
        `120` (2 minutes).
        """
        __props__['haVmMinimumUptime'] = ha_vm_minimum_uptime

        if ha_vm_monitoring and not isinstance(ha_vm_monitoring, basestring):
            raise TypeError('Expected property ha_vm_monitoring to be a basestring')
        __self__.ha_vm_monitoring = ha_vm_monitoring
        """
        The type of virtual machine monitoring to use
        when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
        `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
        """
        __props__['haVmMonitoring'] = ha_vm_monitoring

        if ha_vm_monitoring_use_cluster_defaults and not isinstance(ha_vm_monitoring_use_cluster_defaults, bool):
            raise TypeError('Expected property ha_vm_monitoring_use_cluster_defaults to be a bool')
        __self__.ha_vm_monitoring_use_cluster_defaults = ha_vm_monitoring_use_cluster_defaults
        """
        Determines whether or
        not the cluster's default settings or the VM override settings specified in
        this resource are used for virtual machine monitoring. The default is `true`
        (use cluster defaults) - set to `false` to have overrides take effect.
        """
        __props__['haVmMonitoringUseClusterDefaults'] = ha_vm_monitoring_use_cluster_defaults

        if ha_vm_restart_priority and not isinstance(ha_vm_restart_priority, basestring):
            raise TypeError('Expected property ha_vm_restart_priority to be a basestring')
        __self__.ha_vm_restart_priority = ha_vm_restart_priority
        """
        The restart priority for the virtual
        machine when vSphere detects a host failure. Can be one of
        `clusterRestartPriority`, `lowest`, `low`, `medium`, `high`, or `highest`.
        Default: `clusterRestartPriority`.
        """
        __props__['haVmRestartPriority'] = ha_vm_restart_priority

        if ha_vm_restart_timeout and not isinstance(ha_vm_restart_timeout, int):
            raise TypeError('Expected property ha_vm_restart_timeout to be a int')
        __self__.ha_vm_restart_timeout = ha_vm_restart_timeout
        """
        The maximum time, in seconds, that
        vSphere HA will wait for this virtual machine to be ready. Use `-1` to
        specify the cluster default.  Default: `-1`.
        <sup>[\*][tf-vsphere-cluster-resource-version-restrictions]</sup>
        """
        __props__['haVmRestartTimeout'] = ha_vm_restart_timeout

        if not virtual_machine_id:
            raise TypeError('Missing required property virtual_machine_id')
        elif not isinstance(virtual_machine_id, basestring):
            raise TypeError('Expected property virtual_machine_id to be a basestring')
        __self__.virtual_machine_id = virtual_machine_id
        """
        The UUID of the virtual machine to create
        the override for.  Forces a new resource if changed.
        """
        __props__['virtualMachineId'] = virtual_machine_id

        super(HaVmOverride, __self__).__init__(
            'vsphere:index/haVmOverride:HaVmOverride',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'computeClusterId' in outs:
            self.compute_cluster_id = outs['computeClusterId']
        if 'haDatastoreApdRecoveryAction' in outs:
            self.ha_datastore_apd_recovery_action = outs['haDatastoreApdRecoveryAction']
        if 'haDatastoreApdResponse' in outs:
            self.ha_datastore_apd_response = outs['haDatastoreApdResponse']
        if 'haDatastoreApdResponseDelay' in outs:
            self.ha_datastore_apd_response_delay = outs['haDatastoreApdResponseDelay']
        if 'haDatastorePdlResponse' in outs:
            self.ha_datastore_pdl_response = outs['haDatastorePdlResponse']
        if 'haHostIsolationResponse' in outs:
            self.ha_host_isolation_response = outs['haHostIsolationResponse']
        if 'haVmFailureInterval' in outs:
            self.ha_vm_failure_interval = outs['haVmFailureInterval']
        if 'haVmMaximumFailureWindow' in outs:
            self.ha_vm_maximum_failure_window = outs['haVmMaximumFailureWindow']
        if 'haVmMaximumResets' in outs:
            self.ha_vm_maximum_resets = outs['haVmMaximumResets']
        if 'haVmMinimumUptime' in outs:
            self.ha_vm_minimum_uptime = outs['haVmMinimumUptime']
        if 'haVmMonitoring' in outs:
            self.ha_vm_monitoring = outs['haVmMonitoring']
        if 'haVmMonitoringUseClusterDefaults' in outs:
            self.ha_vm_monitoring_use_cluster_defaults = outs['haVmMonitoringUseClusterDefaults']
        if 'haVmRestartPriority' in outs:
            self.ha_vm_restart_priority = outs['haVmRestartPriority']
        if 'haVmRestartTimeout' in outs:
            self.ha_vm_restart_timeout = outs['haVmRestartTimeout']
        if 'virtualMachineId' in outs:
            self.virtual_machine_id = outs['virtualMachineId']
