# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class VmfsDatastore(pulumi.CustomResource):
    """
    The `vsphere_vmfs_datastore` resource can be used to create and manage VMFS
    datastores on an ESXi host or a set of hosts. The resource supports using any
    SCSI device that can generally be used in a datastore, such as local disks, or
    disks presented to a host or multiple hosts over Fibre Channel or iSCSI.
    Devices can be specified manually, or discovered using the
    [`vsphere_vmfs_disks`][data-source-vmfs-disks] data source.
    
    [data-source-vmfs-disks]: /docs/providers/vsphere/d/vmfs_disks.html 
    """
    def __init__(__self__, __name__, __opts__=None, custom_attributes=None, datastore_cluster_id=None, disks=None, folder=None, host_system_id=None, name=None, tags=None):
        """Create a VmfsDatastore resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if custom_attributes and not isinstance(custom_attributes, dict):
            raise TypeError('Expected property custom_attributes to be a dict')
        __self__.custom_attributes = custom_attributes
        """
        Map of custom attribute ids to attribute 
        value string to set on datastore resource. See
        [here][docs-setting-custom-attributes] for a reference on how to set values
        for custom attributes.
        """
        __props__['customAttributes'] = custom_attributes

        if datastore_cluster_id and not isinstance(datastore_cluster_id, basestring):
            raise TypeError('Expected property datastore_cluster_id to be a basestring')
        __self__.datastore_cluster_id = datastore_cluster_id
        """
        The [managed object
        ID][docs-about-morefs] of a datastore cluster to put this datastore in.
        Conflicts with `folder`.
        """
        __props__['datastoreClusterId'] = datastore_cluster_id

        if not disks:
            raise TypeError('Missing required property disks')
        elif not isinstance(disks, list):
            raise TypeError('Expected property disks to be a list')
        __self__.disks = disks
        """
        The disks to use with the datastore.
        """
        __props__['disks'] = disks

        if folder and not isinstance(folder, basestring):
            raise TypeError('Expected property folder to be a basestring')
        __self__.folder = folder
        """
        The relative path to a folder to put this datastore in.
        This is a path relative to the datacenter you are deploying the datastore to.
        Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
        Terraform will place a datastore named `terraform-test` in a datastore folder
        located at `/dc1/datastore/foo/bar`, with the final inventory path being
        `/dc1/datastore/foo/bar/terraform-test`. Conflicts with
        `datastore_cluster_id`.
        """
        __props__['folder'] = folder

        if not host_system_id:
            raise TypeError('Missing required property host_system_id')
        elif not isinstance(host_system_id, basestring):
            raise TypeError('Expected property host_system_id to be a basestring')
        __self__.host_system_id = host_system_id
        """
        The [managed object ID][docs-about-morefs] of
        the host to set the datastore up on. Note that this is not necessarily the
        only host that the datastore will be set up on - see
        here for more info. Forces a
        new resource if changed.
        """
        __props__['hostSystemId'] = host_system_id

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the datastore. Forces a new resource if
        changed.
        """
        __props__['name'] = name

        if tags and not isinstance(tags, list):
            raise TypeError('Expected property tags to be a list')
        __self__.tags = tags
        """
        The IDs of any tags to attach to this resource. See
        [here][docs-applying-tags] for a reference on how to apply tags.
        """
        __props__['tags'] = tags

        __self__.accessible = pulumi.runtime.UNKNOWN
        """
        The connectivity status of the datastore. If this is `false`,
        some other computed attributes may be out of date.
        """
        __self__.capacity = pulumi.runtime.UNKNOWN
        """
        Maximum capacity of the datastore, in megabytes.
        """
        __self__.free_space = pulumi.runtime.UNKNOWN
        """
        Available space of this datastore, in megabytes.
        """
        __self__.maintenance_mode = pulumi.runtime.UNKNOWN
        """
        The current maintenance mode state of the datastore.
        """
        __self__.multiple_host_access = pulumi.runtime.UNKNOWN
        """
        If `true`, more than one host in the datacenter has
        been configured with access to the datastore.
        """
        __self__.uncommitted_space = pulumi.runtime.UNKNOWN
        """
        Total additional storage space, in megabytes,
        potentially used by all virtual machines on this datastore.
        """
        __self__.url = pulumi.runtime.UNKNOWN
        """
        The unique locator for the datastore.
        """

        super(VmfsDatastore, __self__).__init__(
            'vsphere:index/vmfsDatastore:VmfsDatastore',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'accessible' in outs:
            self.accessible = outs['accessible']
        if 'capacity' in outs:
            self.capacity = outs['capacity']
        if 'customAttributes' in outs:
            self.custom_attributes = outs['customAttributes']
        if 'datastoreClusterId' in outs:
            self.datastore_cluster_id = outs['datastoreClusterId']
        if 'disks' in outs:
            self.disks = outs['disks']
        if 'folder' in outs:
            self.folder = outs['folder']
        if 'freeSpace' in outs:
            self.free_space = outs['freeSpace']
        if 'hostSystemId' in outs:
            self.host_system_id = outs['hostSystemId']
        if 'maintenanceMode' in outs:
            self.maintenance_mode = outs['maintenanceMode']
        if 'multipleHostAccess' in outs:
            self.multiple_host_access = outs['multipleHostAccess']
        if 'name' in outs:
            self.name = outs['name']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'uncommittedSpace' in outs:
            self.uncommitted_space = outs['uncommittedSpace']
        if 'url' in outs:
            self.url = outs['url']
