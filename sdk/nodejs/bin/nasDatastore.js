"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * The `vsphere_nas_datastore` resource can be used to create and manage NAS
 * datastores on an ESXi host or a set of hosts. The resource supports mounting
 * NFS v3 and v4.1 shares to be used as datastores.
 *
 * ~> **NOTE:** Unlike [`vsphere_vmfs_datastore`][resource-vmfs-datastore], a NAS
 * datastore is only mounted on the hosts you choose to mount it on. To mount on
 * multiple hosts, you must specify each host that you want to add in the
 * `host_system_ids` argument.
 *
 * [resource-vmfs-datastore]: /docs/providers/vsphere/r/vmfs_datastore.html
 */
class NasDatastore extends pulumi.CustomResource {
    /**
     * Get an existing NasDatastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new NasDatastore(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["accessMode"] = state ? state.accessMode : undefined;
            inputs["accessible"] = state ? state.accessible : undefined;
            inputs["capacity"] = state ? state.capacity : undefined;
            inputs["customAttributes"] = state ? state.customAttributes : undefined;
            inputs["datastoreClusterId"] = state ? state.datastoreClusterId : undefined;
            inputs["folder"] = state ? state.folder : undefined;
            inputs["freeSpace"] = state ? state.freeSpace : undefined;
            inputs["hostSystemIds"] = state ? state.hostSystemIds : undefined;
            inputs["maintenanceMode"] = state ? state.maintenanceMode : undefined;
            inputs["multipleHostAccess"] = state ? state.multipleHostAccess : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["protocolEndpoint"] = state ? state.protocolEndpoint : undefined;
            inputs["remoteHosts"] = state ? state.remoteHosts : undefined;
            inputs["remotePath"] = state ? state.remotePath : undefined;
            inputs["securityType"] = state ? state.securityType : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["uncommittedSpace"] = state ? state.uncommittedSpace : undefined;
            inputs["url"] = state ? state.url : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.hostSystemIds === undefined) {
                throw new Error("Missing required property 'hostSystemIds'");
            }
            if (!args || args.remoteHosts === undefined) {
                throw new Error("Missing required property 'remoteHosts'");
            }
            if (!args || args.remotePath === undefined) {
                throw new Error("Missing required property 'remotePath'");
            }
            inputs["accessMode"] = args ? args.accessMode : undefined;
            inputs["customAttributes"] = args ? args.customAttributes : undefined;
            inputs["datastoreClusterId"] = args ? args.datastoreClusterId : undefined;
            inputs["folder"] = args ? args.folder : undefined;
            inputs["hostSystemIds"] = args ? args.hostSystemIds : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["remoteHosts"] = args ? args.remoteHosts : undefined;
            inputs["remotePath"] = args ? args.remotePath : undefined;
            inputs["securityType"] = args ? args.securityType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["accessible"] = undefined /*out*/;
            inputs["capacity"] = undefined /*out*/;
            inputs["freeSpace"] = undefined /*out*/;
            inputs["maintenanceMode"] = undefined /*out*/;
            inputs["multipleHostAccess"] = undefined /*out*/;
            inputs["protocolEndpoint"] = undefined /*out*/;
            inputs["uncommittedSpace"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        super("vsphere:index/nasDatastore:NasDatastore", name, inputs, opts);
    }
}
exports.NasDatastore = NasDatastore;
//# sourceMappingURL=nasDatastore.js.map