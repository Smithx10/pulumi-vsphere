"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * The `vsphere_host_port_group` resource can be used to manage vSphere standard
 * port groups on an ESXi host. These port groups are connected to standard
 * virtual switches, which can be managed by the
 * [`vsphere_host_virtual_switch`][host-virtual-switch] resource.
 *
 * For an overview on vSphere networking concepts, see [this page][ref-vsphere-net-concepts].
 *
 * [host-virtual-switch]: /docs/providers/vsphere/r/host_virtual_switch.html
 * [ref-vsphere-net-concepts]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.networking.doc/GUID-2B11DBB8-CB3C-4AFF-8885-EFEA0FC562F4.html
 */
class HostPortGroup extends pulumi.CustomResource {
    /**
     * Get an existing HostPortGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new HostPortGroup(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["activeNics"] = state ? state.activeNics : undefined;
            inputs["allowForgedTransmits"] = state ? state.allowForgedTransmits : undefined;
            inputs["allowMacChanges"] = state ? state.allowMacChanges : undefined;
            inputs["allowPromiscuous"] = state ? state.allowPromiscuous : undefined;
            inputs["checkBeacon"] = state ? state.checkBeacon : undefined;
            inputs["computedPolicy"] = state ? state.computedPolicy : undefined;
            inputs["failback"] = state ? state.failback : undefined;
            inputs["hostSystemId"] = state ? state.hostSystemId : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notifySwitches"] = state ? state.notifySwitches : undefined;
            inputs["ports"] = state ? state.ports : undefined;
            inputs["shapingAverageBandwidth"] = state ? state.shapingAverageBandwidth : undefined;
            inputs["shapingBurstSize"] = state ? state.shapingBurstSize : undefined;
            inputs["shapingEnabled"] = state ? state.shapingEnabled : undefined;
            inputs["shapingPeakBandwidth"] = state ? state.shapingPeakBandwidth : undefined;
            inputs["standbyNics"] = state ? state.standbyNics : undefined;
            inputs["teamingPolicy"] = state ? state.teamingPolicy : undefined;
            inputs["virtualSwitchName"] = state ? state.virtualSwitchName : undefined;
            inputs["vlanId"] = state ? state.vlanId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.hostSystemId === undefined) {
                throw new Error("Missing required property 'hostSystemId'");
            }
            if (!args || args.virtualSwitchName === undefined) {
                throw new Error("Missing required property 'virtualSwitchName'");
            }
            inputs["activeNics"] = args ? args.activeNics : undefined;
            inputs["allowForgedTransmits"] = args ? args.allowForgedTransmits : undefined;
            inputs["allowMacChanges"] = args ? args.allowMacChanges : undefined;
            inputs["allowPromiscuous"] = args ? args.allowPromiscuous : undefined;
            inputs["checkBeacon"] = args ? args.checkBeacon : undefined;
            inputs["failback"] = args ? args.failback : undefined;
            inputs["hostSystemId"] = args ? args.hostSystemId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notifySwitches"] = args ? args.notifySwitches : undefined;
            inputs["shapingAverageBandwidth"] = args ? args.shapingAverageBandwidth : undefined;
            inputs["shapingBurstSize"] = args ? args.shapingBurstSize : undefined;
            inputs["shapingEnabled"] = args ? args.shapingEnabled : undefined;
            inputs["shapingPeakBandwidth"] = args ? args.shapingPeakBandwidth : undefined;
            inputs["standbyNics"] = args ? args.standbyNics : undefined;
            inputs["teamingPolicy"] = args ? args.teamingPolicy : undefined;
            inputs["virtualSwitchName"] = args ? args.virtualSwitchName : undefined;
            inputs["vlanId"] = args ? args.vlanId : undefined;
            inputs["computedPolicy"] = undefined /*out*/;
            inputs["key"] = undefined /*out*/;
            inputs["ports"] = undefined /*out*/;
        }
        super("vsphere:index/hostPortGroup:HostPortGroup", name, inputs, opts);
    }
}
exports.HostPortGroup = HostPortGroup;
//# sourceMappingURL=hostPortGroup.js.map