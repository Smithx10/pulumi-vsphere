"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * The `vsphere_file` resource can be used to upload files (such as virtual disk
 * files) from the host machine that Terraform is running on to a target
 * datastore.  The resource can also be used to copy files between datastores, or
 * from one location to another on the same datastore.
 *
 * Updates to destination parameters such as `datacenter`, `datastore`, or
 * `destination_file` will move the managed file a new destination based on the
 * values of the new settings.  If any source parameter is changed, such as
 * `source_datastore`, `source_datacenter` or `source_file`), the resource will be
 * re-created. Depending on if destination parameters are being changed as well,
 * this may result in the destination file either being overwritten or deleted at
 * the old location.
 */
class File extends pulumi.CustomResource {
    /**
     * Get an existing File resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new File(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["createDirectories"] = state ? state.createDirectories : undefined;
            inputs["datacenter"] = state ? state.datacenter : undefined;
            inputs["datastore"] = state ? state.datastore : undefined;
            inputs["destinationFile"] = state ? state.destinationFile : undefined;
            inputs["sourceDatacenter"] = state ? state.sourceDatacenter : undefined;
            inputs["sourceDatastore"] = state ? state.sourceDatastore : undefined;
            inputs["sourceFile"] = state ? state.sourceFile : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.datastore === undefined) {
                throw new Error("Missing required property 'datastore'");
            }
            if (!args || args.destinationFile === undefined) {
                throw new Error("Missing required property 'destinationFile'");
            }
            if (!args || args.sourceFile === undefined) {
                throw new Error("Missing required property 'sourceFile'");
            }
            inputs["createDirectories"] = args ? args.createDirectories : undefined;
            inputs["datacenter"] = args ? args.datacenter : undefined;
            inputs["datastore"] = args ? args.datastore : undefined;
            inputs["destinationFile"] = args ? args.destinationFile : undefined;
            inputs["sourceDatacenter"] = args ? args.sourceDatacenter : undefined;
            inputs["sourceDatastore"] = args ? args.sourceDatastore : undefined;
            inputs["sourceFile"] = args ? args.sourceFile : undefined;
        }
        super("vsphere:index/file:File", name, inputs, opts);
    }
}
exports.File = File;
//# sourceMappingURL=file.js.map