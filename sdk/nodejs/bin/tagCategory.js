"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * The `vsphere_tag_category` resource can be used to create and manage tag
 * categories, which determine how tags are grouped together and applied to
 * specific objects.
 *
 * For more information about tags, click [here][ext-tags-general]. For more
 * information about tag categories specifically, click
 * [here][ext-tag-categories].
 *
 * [ext-tags-general]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vcenterhost.doc/GUID-E8E854DD-AA97-4E0C-8419-CE84F93C4058.html
 * [ext-tag-categories]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vcenterhost.doc/GUID-BA3D1794-28F2-43F3-BCE9-3964CB207FB6.html
 *
 * ~> **NOTE:** Tagging support is unsupported on direct ESXi connections and
 * requires vCenter 6.0 or higher.
 */
class TagCategory extends pulumi.CustomResource {
    /**
     * Get an existing TagCategory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new TagCategory(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["associableTypes"] = state ? state.associableTypes : undefined;
            inputs["cardinality"] = state ? state.cardinality : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.associableTypes === undefined) {
                throw new Error("Missing required property 'associableTypes'");
            }
            if (!args || args.cardinality === undefined) {
                throw new Error("Missing required property 'cardinality'");
            }
            inputs["associableTypes"] = args ? args.associableTypes : undefined;
            inputs["cardinality"] = args ? args.cardinality : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        super("vsphere:index/tagCategory:TagCategory", name, inputs, opts);
    }
}
exports.TagCategory = TagCategory;
//# sourceMappingURL=tagCategory.js.map