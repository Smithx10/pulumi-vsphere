"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * The `vsphere_virtual_disk` resource can be used to create virtual disks outside
 * of any given [`vsphere_virtual_machine`][docs-vsphere-virtual-machine]
 * resource. These disks can be attached to a virtual machine by creating a disk
 * block with the [`attach`][docs-vsphere-virtual-machine-disk-attach] parameter.
 *
 * [docs-vsphere-virtual-machine]: /docs/providers/vsphere/r/virtual_machine.html
 * [docs-vsphere-virtual-machine-disk-attach]: /docs/providers/vsphere/r/virtual_machine.html#attach
 */
class VirtualDisk extends pulumi.CustomResource {
    /**
     * Get an existing VirtualDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new VirtualDisk(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["adapterType"] = state ? state.adapterType : undefined;
            inputs["createDirectories"] = state ? state.createDirectories : undefined;
            inputs["datacenter"] = state ? state.datacenter : undefined;
            inputs["datastore"] = state ? state.datastore : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["vmdkPath"] = state ? state.vmdkPath : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.datastore === undefined) {
                throw new Error("Missing required property 'datastore'");
            }
            if (!args || args.size === undefined) {
                throw new Error("Missing required property 'size'");
            }
            if (!args || args.vmdkPath === undefined) {
                throw new Error("Missing required property 'vmdkPath'");
            }
            inputs["adapterType"] = args ? args.adapterType : undefined;
            inputs["createDirectories"] = args ? args.createDirectories : undefined;
            inputs["datacenter"] = args ? args.datacenter : undefined;
            inputs["datastore"] = args ? args.datastore : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["vmdkPath"] = args ? args.vmdkPath : undefined;
        }
        super("vsphere:index/virtualDisk:VirtualDisk", name, inputs, opts);
    }
}
exports.VirtualDisk = VirtualDisk;
//# sourceMappingURL=virtualDisk.js.map