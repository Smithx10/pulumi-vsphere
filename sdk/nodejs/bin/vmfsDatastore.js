"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * The `vsphere_vmfs_datastore` resource can be used to create and manage VMFS
 * datastores on an ESXi host or a set of hosts. The resource supports using any
 * SCSI device that can generally be used in a datastore, such as local disks, or
 * disks presented to a host or multiple hosts over Fibre Channel or iSCSI.
 * Devices can be specified manually, or discovered using the
 * [`vsphere_vmfs_disks`][data-source-vmfs-disks] data source.
 *
 * [data-source-vmfs-disks]: /docs/providers/vsphere/d/vmfs_disks.html
 */
class VmfsDatastore extends pulumi.CustomResource {
    /**
     * Get an existing VmfsDatastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new VmfsDatastore(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["accessible"] = state ? state.accessible : undefined;
            inputs["capacity"] = state ? state.capacity : undefined;
            inputs["customAttributes"] = state ? state.customAttributes : undefined;
            inputs["datastoreClusterId"] = state ? state.datastoreClusterId : undefined;
            inputs["disks"] = state ? state.disks : undefined;
            inputs["folder"] = state ? state.folder : undefined;
            inputs["freeSpace"] = state ? state.freeSpace : undefined;
            inputs["hostSystemId"] = state ? state.hostSystemId : undefined;
            inputs["maintenanceMode"] = state ? state.maintenanceMode : undefined;
            inputs["multipleHostAccess"] = state ? state.multipleHostAccess : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["uncommittedSpace"] = state ? state.uncommittedSpace : undefined;
            inputs["url"] = state ? state.url : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.disks === undefined) {
                throw new Error("Missing required property 'disks'");
            }
            if (!args || args.hostSystemId === undefined) {
                throw new Error("Missing required property 'hostSystemId'");
            }
            inputs["customAttributes"] = args ? args.customAttributes : undefined;
            inputs["datastoreClusterId"] = args ? args.datastoreClusterId : undefined;
            inputs["disks"] = args ? args.disks : undefined;
            inputs["folder"] = args ? args.folder : undefined;
            inputs["hostSystemId"] = args ? args.hostSystemId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["accessible"] = undefined /*out*/;
            inputs["capacity"] = undefined /*out*/;
            inputs["freeSpace"] = undefined /*out*/;
            inputs["maintenanceMode"] = undefined /*out*/;
            inputs["multipleHostAccess"] = undefined /*out*/;
            inputs["uncommittedSpace"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        super("vsphere:index/vmfsDatastore:VmfsDatastore", name, inputs, opts);
    }
}
exports.VmfsDatastore = VmfsDatastore;
//# sourceMappingURL=vmfsDatastore.js.map