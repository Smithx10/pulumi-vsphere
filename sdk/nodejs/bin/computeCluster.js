"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * -> **A note on the naming of this resource:** VMware refers to clusters of
 * hosts in the UI and documentation as _clusters_, _HA clusters_, or _DRS
 * clusters_. All of these refer to the same kind of resource (with the latter two
 * referring to specific features of clustering). In Terraform, we use
 * `vsphere_compute_cluster` to differentiate host clusters from _datastore
 * clusters_, which are clusters of datastores that can be used to distribute load
 * and ensure fault tolerance via distribution of virtual machines. Datastore
 * clusters can also be managed through Terraform, via the
 * [`vsphere_datastore_cluster` resource][docs-r-vsphere-datastore-cluster].
 *
 * [docs-r-vsphere-datastore-cluster]: /docs/providers/vsphere/r/datastore_cluster.html
 *
 * The `vsphere_compute_cluster` resource can be used to create and manage
 * clusters of hosts allowing for resource control of compute resources, load
 * balancing through DRS, and high availability through vSphere HA.
 *
 * For more information on vSphere clusters and DRS, see [this
 * page][ref-vsphere-drs-clusters]. For more information on vSphere HA, see [this
 * page][ref-vsphere-ha-clusters].
 *
 * [ref-vsphere-drs-clusters]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.resmgmt.doc/GUID-8ACF3502-5314-469F-8CC9-4A9BD5925BC2.html
 * [ref-vsphere-ha-clusters]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.avail.doc/GUID-5432CA24-14F1-44E3-87FB-61D937831CF6.html
 *
 * ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
 * connections.
 *
 * ~> **NOTE:** vSphere DRS requires a vSphere Enterprise Plus license.
 */
class ComputeCluster extends pulumi.CustomResource {
    /**
     * Get an existing ComputeCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new ComputeCluster(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["customAttributes"] = state ? state.customAttributes : undefined;
            inputs["datacenterId"] = state ? state.datacenterId : undefined;
            inputs["dpmAutomationLevel"] = state ? state.dpmAutomationLevel : undefined;
            inputs["dpmEnabled"] = state ? state.dpmEnabled : undefined;
            inputs["dpmThreshold"] = state ? state.dpmThreshold : undefined;
            inputs["drsAdvancedOptions"] = state ? state.drsAdvancedOptions : undefined;
            inputs["drsAutomationLevel"] = state ? state.drsAutomationLevel : undefined;
            inputs["drsEnablePredictiveDrs"] = state ? state.drsEnablePredictiveDrs : undefined;
            inputs["drsEnableVmOverrides"] = state ? state.drsEnableVmOverrides : undefined;
            inputs["drsEnabled"] = state ? state.drsEnabled : undefined;
            inputs["drsMigrationThreshold"] = state ? state.drsMigrationThreshold : undefined;
            inputs["folder"] = state ? state.folder : undefined;
            inputs["forceEvacuateOnDestroy"] = state ? state.forceEvacuateOnDestroy : undefined;
            inputs["haAdmissionControlFailoverHostSystemIds"] = state ? state.haAdmissionControlFailoverHostSystemIds : undefined;
            inputs["haAdmissionControlHostFailureTolerance"] = state ? state.haAdmissionControlHostFailureTolerance : undefined;
            inputs["haAdmissionControlPerformanceTolerance"] = state ? state.haAdmissionControlPerformanceTolerance : undefined;
            inputs["haAdmissionControlPolicy"] = state ? state.haAdmissionControlPolicy : undefined;
            inputs["haAdmissionControlResourcePercentageAutoCompute"] = state ? state.haAdmissionControlResourcePercentageAutoCompute : undefined;
            inputs["haAdmissionControlResourcePercentageCpu"] = state ? state.haAdmissionControlResourcePercentageCpu : undefined;
            inputs["haAdmissionControlResourcePercentageMemory"] = state ? state.haAdmissionControlResourcePercentageMemory : undefined;
            inputs["haAdmissionControlSlotPolicyExplicitCpu"] = state ? state.haAdmissionControlSlotPolicyExplicitCpu : undefined;
            inputs["haAdmissionControlSlotPolicyExplicitMemory"] = state ? state.haAdmissionControlSlotPolicyExplicitMemory : undefined;
            inputs["haAdmissionControlSlotPolicyUseExplicitSize"] = state ? state.haAdmissionControlSlotPolicyUseExplicitSize : undefined;
            inputs["haAdvancedOptions"] = state ? state.haAdvancedOptions : undefined;
            inputs["haDatastoreApdRecoveryAction"] = state ? state.haDatastoreApdRecoveryAction : undefined;
            inputs["haDatastoreApdResponse"] = state ? state.haDatastoreApdResponse : undefined;
            inputs["haDatastoreApdResponseDelay"] = state ? state.haDatastoreApdResponseDelay : undefined;
            inputs["haDatastorePdlResponse"] = state ? state.haDatastorePdlResponse : undefined;
            inputs["haEnabled"] = state ? state.haEnabled : undefined;
            inputs["haHeartbeatDatastoreIds"] = state ? state.haHeartbeatDatastoreIds : undefined;
            inputs["haHeartbeatDatastorePolicy"] = state ? state.haHeartbeatDatastorePolicy : undefined;
            inputs["haHostIsolationResponse"] = state ? state.haHostIsolationResponse : undefined;
            inputs["haHostMonitoring"] = state ? state.haHostMonitoring : undefined;
            inputs["haVmComponentProtection"] = state ? state.haVmComponentProtection : undefined;
            inputs["haVmDependencyRestartCondition"] = state ? state.haVmDependencyRestartCondition : undefined;
            inputs["haVmFailureInterval"] = state ? state.haVmFailureInterval : undefined;
            inputs["haVmMaximumFailureWindow"] = state ? state.haVmMaximumFailureWindow : undefined;
            inputs["haVmMaximumResets"] = state ? state.haVmMaximumResets : undefined;
            inputs["haVmMinimumUptime"] = state ? state.haVmMinimumUptime : undefined;
            inputs["haVmMonitoring"] = state ? state.haVmMonitoring : undefined;
            inputs["haVmRestartAdditionalDelay"] = state ? state.haVmRestartAdditionalDelay : undefined;
            inputs["haVmRestartPriority"] = state ? state.haVmRestartPriority : undefined;
            inputs["haVmRestartTimeout"] = state ? state.haVmRestartTimeout : undefined;
            inputs["hostClusterExitTimeout"] = state ? state.hostClusterExitTimeout : undefined;
            inputs["hostSystemIds"] = state ? state.hostSystemIds : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["proactiveHaAutomationLevel"] = state ? state.proactiveHaAutomationLevel : undefined;
            inputs["proactiveHaEnabled"] = state ? state.proactiveHaEnabled : undefined;
            inputs["proactiveHaModerateRemediation"] = state ? state.proactiveHaModerateRemediation : undefined;
            inputs["proactiveHaProviderIds"] = state ? state.proactiveHaProviderIds : undefined;
            inputs["proactiveHaSevereRemediation"] = state ? state.proactiveHaSevereRemediation : undefined;
            inputs["resourcePoolId"] = state ? state.resourcePoolId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.datacenterId === undefined) {
                throw new Error("Missing required property 'datacenterId'");
            }
            inputs["customAttributes"] = args ? args.customAttributes : undefined;
            inputs["datacenterId"] = args ? args.datacenterId : undefined;
            inputs["dpmAutomationLevel"] = args ? args.dpmAutomationLevel : undefined;
            inputs["dpmEnabled"] = args ? args.dpmEnabled : undefined;
            inputs["dpmThreshold"] = args ? args.dpmThreshold : undefined;
            inputs["drsAdvancedOptions"] = args ? args.drsAdvancedOptions : undefined;
            inputs["drsAutomationLevel"] = args ? args.drsAutomationLevel : undefined;
            inputs["drsEnablePredictiveDrs"] = args ? args.drsEnablePredictiveDrs : undefined;
            inputs["drsEnableVmOverrides"] = args ? args.drsEnableVmOverrides : undefined;
            inputs["drsEnabled"] = args ? args.drsEnabled : undefined;
            inputs["drsMigrationThreshold"] = args ? args.drsMigrationThreshold : undefined;
            inputs["folder"] = args ? args.folder : undefined;
            inputs["forceEvacuateOnDestroy"] = args ? args.forceEvacuateOnDestroy : undefined;
            inputs["haAdmissionControlFailoverHostSystemIds"] = args ? args.haAdmissionControlFailoverHostSystemIds : undefined;
            inputs["haAdmissionControlHostFailureTolerance"] = args ? args.haAdmissionControlHostFailureTolerance : undefined;
            inputs["haAdmissionControlPerformanceTolerance"] = args ? args.haAdmissionControlPerformanceTolerance : undefined;
            inputs["haAdmissionControlPolicy"] = args ? args.haAdmissionControlPolicy : undefined;
            inputs["haAdmissionControlResourcePercentageAutoCompute"] = args ? args.haAdmissionControlResourcePercentageAutoCompute : undefined;
            inputs["haAdmissionControlResourcePercentageCpu"] = args ? args.haAdmissionControlResourcePercentageCpu : undefined;
            inputs["haAdmissionControlResourcePercentageMemory"] = args ? args.haAdmissionControlResourcePercentageMemory : undefined;
            inputs["haAdmissionControlSlotPolicyExplicitCpu"] = args ? args.haAdmissionControlSlotPolicyExplicitCpu : undefined;
            inputs["haAdmissionControlSlotPolicyExplicitMemory"] = args ? args.haAdmissionControlSlotPolicyExplicitMemory : undefined;
            inputs["haAdmissionControlSlotPolicyUseExplicitSize"] = args ? args.haAdmissionControlSlotPolicyUseExplicitSize : undefined;
            inputs["haAdvancedOptions"] = args ? args.haAdvancedOptions : undefined;
            inputs["haDatastoreApdRecoveryAction"] = args ? args.haDatastoreApdRecoveryAction : undefined;
            inputs["haDatastoreApdResponse"] = args ? args.haDatastoreApdResponse : undefined;
            inputs["haDatastoreApdResponseDelay"] = args ? args.haDatastoreApdResponseDelay : undefined;
            inputs["haDatastorePdlResponse"] = args ? args.haDatastorePdlResponse : undefined;
            inputs["haEnabled"] = args ? args.haEnabled : undefined;
            inputs["haHeartbeatDatastoreIds"] = args ? args.haHeartbeatDatastoreIds : undefined;
            inputs["haHeartbeatDatastorePolicy"] = args ? args.haHeartbeatDatastorePolicy : undefined;
            inputs["haHostIsolationResponse"] = args ? args.haHostIsolationResponse : undefined;
            inputs["haHostMonitoring"] = args ? args.haHostMonitoring : undefined;
            inputs["haVmComponentProtection"] = args ? args.haVmComponentProtection : undefined;
            inputs["haVmDependencyRestartCondition"] = args ? args.haVmDependencyRestartCondition : undefined;
            inputs["haVmFailureInterval"] = args ? args.haVmFailureInterval : undefined;
            inputs["haVmMaximumFailureWindow"] = args ? args.haVmMaximumFailureWindow : undefined;
            inputs["haVmMaximumResets"] = args ? args.haVmMaximumResets : undefined;
            inputs["haVmMinimumUptime"] = args ? args.haVmMinimumUptime : undefined;
            inputs["haVmMonitoring"] = args ? args.haVmMonitoring : undefined;
            inputs["haVmRestartAdditionalDelay"] = args ? args.haVmRestartAdditionalDelay : undefined;
            inputs["haVmRestartPriority"] = args ? args.haVmRestartPriority : undefined;
            inputs["haVmRestartTimeout"] = args ? args.haVmRestartTimeout : undefined;
            inputs["hostClusterExitTimeout"] = args ? args.hostClusterExitTimeout : undefined;
            inputs["hostSystemIds"] = args ? args.hostSystemIds : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["proactiveHaAutomationLevel"] = args ? args.proactiveHaAutomationLevel : undefined;
            inputs["proactiveHaEnabled"] = args ? args.proactiveHaEnabled : undefined;
            inputs["proactiveHaModerateRemediation"] = args ? args.proactiveHaModerateRemediation : undefined;
            inputs["proactiveHaProviderIds"] = args ? args.proactiveHaProviderIds : undefined;
            inputs["proactiveHaSevereRemediation"] = args ? args.proactiveHaSevereRemediation : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["resourcePoolId"] = undefined /*out*/;
        }
        super("vsphere:index/computeCluster:ComputeCluster", name, inputs, opts);
    }
}
exports.ComputeCluster = ComputeCluster;
//# sourceMappingURL=computeCluster.js.map