"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * The `vsphere_distributed_virtual_switch` resource can be used to manage VMware
 * Distributed Virtual Switches.
 *
 * An essential component of a distributed, scalable VMware datacenter, the
 * vSphere Distributed Virtual Switch (DVS) provides centralized management and
 * monitoring of the networking configuration of all the hosts that are associated
 * with the switch. In addition to adding port groups (see the
 * [`vsphere_distributed_port_group`][distributed-port-group] resource) that can
 * be used as networks for virtual machines, a DVS can be configured to perform
 * advanced high availability, traffic shaping, network monitoring, and more.
 *
 * For an overview on vSphere networking concepts, see [this
 * page][ref-vsphere-net-concepts]. For more information on vSphere DVS, see [this
 * page][ref-vsphere-dvs].
 *
 * [distributed-port-group]: /docs/providers/vsphere/r/distributed_port_group.html
 * [ref-vsphere-net-concepts]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.networking.doc/GUID-2B11DBB8-CB3C-4AFF-8885-EFEA0FC562F4.html
 * [ref-vsphere-dvs]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.networking.doc/GUID-375B45C7-684C-4C51-BA3C-70E48DFABF04.html
 *
 * ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
 * connections.
 */
class DistributedVirtualSwitch extends pulumi.CustomResource {
    /**
     * Get an existing DistributedVirtualSwitch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new DistributedVirtualSwitch(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["activeUplinks"] = state ? state.activeUplinks : undefined;
            inputs["allowForgedTransmits"] = state ? state.allowForgedTransmits : undefined;
            inputs["allowMacChanges"] = state ? state.allowMacChanges : undefined;
            inputs["allowPromiscuous"] = state ? state.allowPromiscuous : undefined;
            inputs["blockAllPorts"] = state ? state.blockAllPorts : undefined;
            inputs["checkBeacon"] = state ? state.checkBeacon : undefined;
            inputs["configVersion"] = state ? state.configVersion : undefined;
            inputs["contactDetail"] = state ? state.contactDetail : undefined;
            inputs["contactName"] = state ? state.contactName : undefined;
            inputs["customAttributes"] = state ? state.customAttributes : undefined;
            inputs["datacenterId"] = state ? state.datacenterId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["directpathGen2Allowed"] = state ? state.directpathGen2Allowed : undefined;
            inputs["egressShapingAverageBandwidth"] = state ? state.egressShapingAverageBandwidth : undefined;
            inputs["egressShapingBurstSize"] = state ? state.egressShapingBurstSize : undefined;
            inputs["egressShapingEnabled"] = state ? state.egressShapingEnabled : undefined;
            inputs["egressShapingPeakBandwidth"] = state ? state.egressShapingPeakBandwidth : undefined;
            inputs["failback"] = state ? state.failback : undefined;
            inputs["faulttoleranceMaximumMbit"] = state ? state.faulttoleranceMaximumMbit : undefined;
            inputs["faulttoleranceReservationMbit"] = state ? state.faulttoleranceReservationMbit : undefined;
            inputs["faulttoleranceShareCount"] = state ? state.faulttoleranceShareCount : undefined;
            inputs["faulttoleranceShareLevel"] = state ? state.faulttoleranceShareLevel : undefined;
            inputs["folder"] = state ? state.folder : undefined;
            inputs["hbrMaximumMbit"] = state ? state.hbrMaximumMbit : undefined;
            inputs["hbrReservationMbit"] = state ? state.hbrReservationMbit : undefined;
            inputs["hbrShareCount"] = state ? state.hbrShareCount : undefined;
            inputs["hbrShareLevel"] = state ? state.hbrShareLevel : undefined;
            inputs["hosts"] = state ? state.hosts : undefined;
            inputs["ingressShapingAverageBandwidth"] = state ? state.ingressShapingAverageBandwidth : undefined;
            inputs["ingressShapingBurstSize"] = state ? state.ingressShapingBurstSize : undefined;
            inputs["ingressShapingEnabled"] = state ? state.ingressShapingEnabled : undefined;
            inputs["ingressShapingPeakBandwidth"] = state ? state.ingressShapingPeakBandwidth : undefined;
            inputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            inputs["iscsiMaximumMbit"] = state ? state.iscsiMaximumMbit : undefined;
            inputs["iscsiReservationMbit"] = state ? state.iscsiReservationMbit : undefined;
            inputs["iscsiShareCount"] = state ? state.iscsiShareCount : undefined;
            inputs["iscsiShareLevel"] = state ? state.iscsiShareLevel : undefined;
            inputs["lacpApiVersion"] = state ? state.lacpApiVersion : undefined;
            inputs["lacpEnabled"] = state ? state.lacpEnabled : undefined;
            inputs["lacpMode"] = state ? state.lacpMode : undefined;
            inputs["linkDiscoveryOperation"] = state ? state.linkDiscoveryOperation : undefined;
            inputs["linkDiscoveryProtocol"] = state ? state.linkDiscoveryProtocol : undefined;
            inputs["managementMaximumMbit"] = state ? state.managementMaximumMbit : undefined;
            inputs["managementReservationMbit"] = state ? state.managementReservationMbit : undefined;
            inputs["managementShareCount"] = state ? state.managementShareCount : undefined;
            inputs["managementShareLevel"] = state ? state.managementShareLevel : undefined;
            inputs["maxMtu"] = state ? state.maxMtu : undefined;
            inputs["multicastFilteringMode"] = state ? state.multicastFilteringMode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["netflowActiveFlowTimeout"] = state ? state.netflowActiveFlowTimeout : undefined;
            inputs["netflowCollectorIpAddress"] = state ? state.netflowCollectorIpAddress : undefined;
            inputs["netflowCollectorPort"] = state ? state.netflowCollectorPort : undefined;
            inputs["netflowEnabled"] = state ? state.netflowEnabled : undefined;
            inputs["netflowIdleFlowTimeout"] = state ? state.netflowIdleFlowTimeout : undefined;
            inputs["netflowInternalFlowsOnly"] = state ? state.netflowInternalFlowsOnly : undefined;
            inputs["netflowObservationDomainId"] = state ? state.netflowObservationDomainId : undefined;
            inputs["netflowSamplingRate"] = state ? state.netflowSamplingRate : undefined;
            inputs["networkResourceControlEnabled"] = state ? state.networkResourceControlEnabled : undefined;
            inputs["networkResourceControlVersion"] = state ? state.networkResourceControlVersion : undefined;
            inputs["nfsMaximumMbit"] = state ? state.nfsMaximumMbit : undefined;
            inputs["nfsReservationMbit"] = state ? state.nfsReservationMbit : undefined;
            inputs["nfsShareCount"] = state ? state.nfsShareCount : undefined;
            inputs["nfsShareLevel"] = state ? state.nfsShareLevel : undefined;
            inputs["notifySwitches"] = state ? state.notifySwitches : undefined;
            inputs["portPrivateSecondaryVlanId"] = state ? state.portPrivateSecondaryVlanId : undefined;
            inputs["standbyUplinks"] = state ? state.standbyUplinks : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["teamingPolicy"] = state ? state.teamingPolicy : undefined;
            inputs["txUplink"] = state ? state.txUplink : undefined;
            inputs["uplinks"] = state ? state.uplinks : undefined;
            inputs["vdpMaximumMbit"] = state ? state.vdpMaximumMbit : undefined;
            inputs["vdpReservationMbit"] = state ? state.vdpReservationMbit : undefined;
            inputs["vdpShareCount"] = state ? state.vdpShareCount : undefined;
            inputs["vdpShareLevel"] = state ? state.vdpShareLevel : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["virtualmachineMaximumMbit"] = state ? state.virtualmachineMaximumMbit : undefined;
            inputs["virtualmachineReservationMbit"] = state ? state.virtualmachineReservationMbit : undefined;
            inputs["virtualmachineShareCount"] = state ? state.virtualmachineShareCount : undefined;
            inputs["virtualmachineShareLevel"] = state ? state.virtualmachineShareLevel : undefined;
            inputs["vlanId"] = state ? state.vlanId : undefined;
            inputs["vlanRanges"] = state ? state.vlanRanges : undefined;
            inputs["vmotionMaximumMbit"] = state ? state.vmotionMaximumMbit : undefined;
            inputs["vmotionReservationMbit"] = state ? state.vmotionReservationMbit : undefined;
            inputs["vmotionShareCount"] = state ? state.vmotionShareCount : undefined;
            inputs["vmotionShareLevel"] = state ? state.vmotionShareLevel : undefined;
            inputs["vsanMaximumMbit"] = state ? state.vsanMaximumMbit : undefined;
            inputs["vsanReservationMbit"] = state ? state.vsanReservationMbit : undefined;
            inputs["vsanShareCount"] = state ? state.vsanShareCount : undefined;
            inputs["vsanShareLevel"] = state ? state.vsanShareLevel : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.datacenterId === undefined) {
                throw new Error("Missing required property 'datacenterId'");
            }
            inputs["activeUplinks"] = args ? args.activeUplinks : undefined;
            inputs["allowForgedTransmits"] = args ? args.allowForgedTransmits : undefined;
            inputs["allowMacChanges"] = args ? args.allowMacChanges : undefined;
            inputs["allowPromiscuous"] = args ? args.allowPromiscuous : undefined;
            inputs["blockAllPorts"] = args ? args.blockAllPorts : undefined;
            inputs["checkBeacon"] = args ? args.checkBeacon : undefined;
            inputs["contactDetail"] = args ? args.contactDetail : undefined;
            inputs["contactName"] = args ? args.contactName : undefined;
            inputs["customAttributes"] = args ? args.customAttributes : undefined;
            inputs["datacenterId"] = args ? args.datacenterId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["directpathGen2Allowed"] = args ? args.directpathGen2Allowed : undefined;
            inputs["egressShapingAverageBandwidth"] = args ? args.egressShapingAverageBandwidth : undefined;
            inputs["egressShapingBurstSize"] = args ? args.egressShapingBurstSize : undefined;
            inputs["egressShapingEnabled"] = args ? args.egressShapingEnabled : undefined;
            inputs["egressShapingPeakBandwidth"] = args ? args.egressShapingPeakBandwidth : undefined;
            inputs["failback"] = args ? args.failback : undefined;
            inputs["faulttoleranceMaximumMbit"] = args ? args.faulttoleranceMaximumMbit : undefined;
            inputs["faulttoleranceReservationMbit"] = args ? args.faulttoleranceReservationMbit : undefined;
            inputs["faulttoleranceShareCount"] = args ? args.faulttoleranceShareCount : undefined;
            inputs["faulttoleranceShareLevel"] = args ? args.faulttoleranceShareLevel : undefined;
            inputs["folder"] = args ? args.folder : undefined;
            inputs["hbrMaximumMbit"] = args ? args.hbrMaximumMbit : undefined;
            inputs["hbrReservationMbit"] = args ? args.hbrReservationMbit : undefined;
            inputs["hbrShareCount"] = args ? args.hbrShareCount : undefined;
            inputs["hbrShareLevel"] = args ? args.hbrShareLevel : undefined;
            inputs["hosts"] = args ? args.hosts : undefined;
            inputs["ingressShapingAverageBandwidth"] = args ? args.ingressShapingAverageBandwidth : undefined;
            inputs["ingressShapingBurstSize"] = args ? args.ingressShapingBurstSize : undefined;
            inputs["ingressShapingEnabled"] = args ? args.ingressShapingEnabled : undefined;
            inputs["ingressShapingPeakBandwidth"] = args ? args.ingressShapingPeakBandwidth : undefined;
            inputs["ipv4Address"] = args ? args.ipv4Address : undefined;
            inputs["iscsiMaximumMbit"] = args ? args.iscsiMaximumMbit : undefined;
            inputs["iscsiReservationMbit"] = args ? args.iscsiReservationMbit : undefined;
            inputs["iscsiShareCount"] = args ? args.iscsiShareCount : undefined;
            inputs["iscsiShareLevel"] = args ? args.iscsiShareLevel : undefined;
            inputs["lacpApiVersion"] = args ? args.lacpApiVersion : undefined;
            inputs["lacpEnabled"] = args ? args.lacpEnabled : undefined;
            inputs["lacpMode"] = args ? args.lacpMode : undefined;
            inputs["linkDiscoveryOperation"] = args ? args.linkDiscoveryOperation : undefined;
            inputs["linkDiscoveryProtocol"] = args ? args.linkDiscoveryProtocol : undefined;
            inputs["managementMaximumMbit"] = args ? args.managementMaximumMbit : undefined;
            inputs["managementReservationMbit"] = args ? args.managementReservationMbit : undefined;
            inputs["managementShareCount"] = args ? args.managementShareCount : undefined;
            inputs["managementShareLevel"] = args ? args.managementShareLevel : undefined;
            inputs["maxMtu"] = args ? args.maxMtu : undefined;
            inputs["multicastFilteringMode"] = args ? args.multicastFilteringMode : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["netflowActiveFlowTimeout"] = args ? args.netflowActiveFlowTimeout : undefined;
            inputs["netflowCollectorIpAddress"] = args ? args.netflowCollectorIpAddress : undefined;
            inputs["netflowCollectorPort"] = args ? args.netflowCollectorPort : undefined;
            inputs["netflowEnabled"] = args ? args.netflowEnabled : undefined;
            inputs["netflowIdleFlowTimeout"] = args ? args.netflowIdleFlowTimeout : undefined;
            inputs["netflowInternalFlowsOnly"] = args ? args.netflowInternalFlowsOnly : undefined;
            inputs["netflowObservationDomainId"] = args ? args.netflowObservationDomainId : undefined;
            inputs["netflowSamplingRate"] = args ? args.netflowSamplingRate : undefined;
            inputs["networkResourceControlEnabled"] = args ? args.networkResourceControlEnabled : undefined;
            inputs["networkResourceControlVersion"] = args ? args.networkResourceControlVersion : undefined;
            inputs["nfsMaximumMbit"] = args ? args.nfsMaximumMbit : undefined;
            inputs["nfsReservationMbit"] = args ? args.nfsReservationMbit : undefined;
            inputs["nfsShareCount"] = args ? args.nfsShareCount : undefined;
            inputs["nfsShareLevel"] = args ? args.nfsShareLevel : undefined;
            inputs["notifySwitches"] = args ? args.notifySwitches : undefined;
            inputs["portPrivateSecondaryVlanId"] = args ? args.portPrivateSecondaryVlanId : undefined;
            inputs["standbyUplinks"] = args ? args.standbyUplinks : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["teamingPolicy"] = args ? args.teamingPolicy : undefined;
            inputs["txUplink"] = args ? args.txUplink : undefined;
            inputs["uplinks"] = args ? args.uplinks : undefined;
            inputs["vdpMaximumMbit"] = args ? args.vdpMaximumMbit : undefined;
            inputs["vdpReservationMbit"] = args ? args.vdpReservationMbit : undefined;
            inputs["vdpShareCount"] = args ? args.vdpShareCount : undefined;
            inputs["vdpShareLevel"] = args ? args.vdpShareLevel : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["virtualmachineMaximumMbit"] = args ? args.virtualmachineMaximumMbit : undefined;
            inputs["virtualmachineReservationMbit"] = args ? args.virtualmachineReservationMbit : undefined;
            inputs["virtualmachineShareCount"] = args ? args.virtualmachineShareCount : undefined;
            inputs["virtualmachineShareLevel"] = args ? args.virtualmachineShareLevel : undefined;
            inputs["vlanId"] = args ? args.vlanId : undefined;
            inputs["vlanRanges"] = args ? args.vlanRanges : undefined;
            inputs["vmotionMaximumMbit"] = args ? args.vmotionMaximumMbit : undefined;
            inputs["vmotionReservationMbit"] = args ? args.vmotionReservationMbit : undefined;
            inputs["vmotionShareCount"] = args ? args.vmotionShareCount : undefined;
            inputs["vmotionShareLevel"] = args ? args.vmotionShareLevel : undefined;
            inputs["vsanMaximumMbit"] = args ? args.vsanMaximumMbit : undefined;
            inputs["vsanReservationMbit"] = args ? args.vsanReservationMbit : undefined;
            inputs["vsanShareCount"] = args ? args.vsanShareCount : undefined;
            inputs["vsanShareLevel"] = args ? args.vsanShareLevel : undefined;
            inputs["configVersion"] = undefined /*out*/;
        }
        super("vsphere:index/distributedVirtualSwitch:DistributedVirtualSwitch", name, inputs, opts);
    }
}
exports.DistributedVirtualSwitch = DistributedVirtualSwitch;
//# sourceMappingURL=distributedVirtualSwitch.js.map