"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * The `vsphere_distributed_port_group` resource can be used to manage vSphere
 * distributed virtual port groups. These port groups are connected to distributed
 * virtual switches, which can be managed by the
 * [`vsphere_distributed_virtual_switch`][distributed-virtual-switch] resource.
 *
 * Distributed port groups can be used as networks for virtual machines, allowing
 * VMs to use the networking supplied by a distributed virtual switch (DVS), with
 * a set of policies that apply to that individual newtork, if desired.
 *
 * For an overview on vSphere networking concepts, see [this
 * page][ref-vsphere-net-concepts]. For more information on vSphere DVS
 * portgroups, see [this page][ref-vsphere-dvportgroup].
 *
 * [distributed-virtual-switch]: /docs/providers/vsphere/r/distributed_virtual_switch.html
 * [ref-vsphere-net-concepts]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.networking.doc/GUID-2B11DBB8-CB3C-4AFF-8885-EFEA0FC562F4.html
 * [ref-vsphere-dvportgroup]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.networking.doc/GUID-69933F6E-2442-46CF-AA17-1196CB9A0A09.html
 *
 * ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
 * connections.
 */
class DistributedPortGroup extends pulumi.CustomResource {
    /**
     * Get an existing DistributedPortGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new DistributedPortGroup(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["activeUplinks"] = state ? state.activeUplinks : undefined;
            inputs["allowForgedTransmits"] = state ? state.allowForgedTransmits : undefined;
            inputs["allowMacChanges"] = state ? state.allowMacChanges : undefined;
            inputs["allowPromiscuous"] = state ? state.allowPromiscuous : undefined;
            inputs["autoExpand"] = state ? state.autoExpand : undefined;
            inputs["blockAllPorts"] = state ? state.blockAllPorts : undefined;
            inputs["blockOverrideAllowed"] = state ? state.blockOverrideAllowed : undefined;
            inputs["checkBeacon"] = state ? state.checkBeacon : undefined;
            inputs["configVersion"] = state ? state.configVersion : undefined;
            inputs["customAttributes"] = state ? state.customAttributes : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["directpathGen2Allowed"] = state ? state.directpathGen2Allowed : undefined;
            inputs["distributedVirtualSwitchUuid"] = state ? state.distributedVirtualSwitchUuid : undefined;
            inputs["egressShapingAverageBandwidth"] = state ? state.egressShapingAverageBandwidth : undefined;
            inputs["egressShapingBurstSize"] = state ? state.egressShapingBurstSize : undefined;
            inputs["egressShapingEnabled"] = state ? state.egressShapingEnabled : undefined;
            inputs["egressShapingPeakBandwidth"] = state ? state.egressShapingPeakBandwidth : undefined;
            inputs["failback"] = state ? state.failback : undefined;
            inputs["ingressShapingAverageBandwidth"] = state ? state.ingressShapingAverageBandwidth : undefined;
            inputs["ingressShapingBurstSize"] = state ? state.ingressShapingBurstSize : undefined;
            inputs["ingressShapingEnabled"] = state ? state.ingressShapingEnabled : undefined;
            inputs["ingressShapingPeakBandwidth"] = state ? state.ingressShapingPeakBandwidth : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["lacpEnabled"] = state ? state.lacpEnabled : undefined;
            inputs["lacpMode"] = state ? state.lacpMode : undefined;
            inputs["livePortMovingAllowed"] = state ? state.livePortMovingAllowed : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["netflowEnabled"] = state ? state.netflowEnabled : undefined;
            inputs["netflowOverrideAllowed"] = state ? state.netflowOverrideAllowed : undefined;
            inputs["networkResourcePoolKey"] = state ? state.networkResourcePoolKey : undefined;
            inputs["networkResourcePoolOverrideAllowed"] = state ? state.networkResourcePoolOverrideAllowed : undefined;
            inputs["notifySwitches"] = state ? state.notifySwitches : undefined;
            inputs["numberOfPorts"] = state ? state.numberOfPorts : undefined;
            inputs["portConfigResetAtDisconnect"] = state ? state.portConfigResetAtDisconnect : undefined;
            inputs["portNameFormat"] = state ? state.portNameFormat : undefined;
            inputs["portPrivateSecondaryVlanId"] = state ? state.portPrivateSecondaryVlanId : undefined;
            inputs["securityPolicyOverrideAllowed"] = state ? state.securityPolicyOverrideAllowed : undefined;
            inputs["shapingOverrideAllowed"] = state ? state.shapingOverrideAllowed : undefined;
            inputs["standbyUplinks"] = state ? state.standbyUplinks : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["teamingPolicy"] = state ? state.teamingPolicy : undefined;
            inputs["trafficFilterOverrideAllowed"] = state ? state.trafficFilterOverrideAllowed : undefined;
            inputs["txUplink"] = state ? state.txUplink : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["uplinkTeamingOverrideAllowed"] = state ? state.uplinkTeamingOverrideAllowed : undefined;
            inputs["vlanId"] = state ? state.vlanId : undefined;
            inputs["vlanOverrideAllowed"] = state ? state.vlanOverrideAllowed : undefined;
            inputs["vlanRanges"] = state ? state.vlanRanges : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.distributedVirtualSwitchUuid === undefined) {
                throw new Error("Missing required property 'distributedVirtualSwitchUuid'");
            }
            inputs["activeUplinks"] = args ? args.activeUplinks : undefined;
            inputs["allowForgedTransmits"] = args ? args.allowForgedTransmits : undefined;
            inputs["allowMacChanges"] = args ? args.allowMacChanges : undefined;
            inputs["allowPromiscuous"] = args ? args.allowPromiscuous : undefined;
            inputs["autoExpand"] = args ? args.autoExpand : undefined;
            inputs["blockAllPorts"] = args ? args.blockAllPorts : undefined;
            inputs["blockOverrideAllowed"] = args ? args.blockOverrideAllowed : undefined;
            inputs["checkBeacon"] = args ? args.checkBeacon : undefined;
            inputs["customAttributes"] = args ? args.customAttributes : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["directpathGen2Allowed"] = args ? args.directpathGen2Allowed : undefined;
            inputs["distributedVirtualSwitchUuid"] = args ? args.distributedVirtualSwitchUuid : undefined;
            inputs["egressShapingAverageBandwidth"] = args ? args.egressShapingAverageBandwidth : undefined;
            inputs["egressShapingBurstSize"] = args ? args.egressShapingBurstSize : undefined;
            inputs["egressShapingEnabled"] = args ? args.egressShapingEnabled : undefined;
            inputs["egressShapingPeakBandwidth"] = args ? args.egressShapingPeakBandwidth : undefined;
            inputs["failback"] = args ? args.failback : undefined;
            inputs["ingressShapingAverageBandwidth"] = args ? args.ingressShapingAverageBandwidth : undefined;
            inputs["ingressShapingBurstSize"] = args ? args.ingressShapingBurstSize : undefined;
            inputs["ingressShapingEnabled"] = args ? args.ingressShapingEnabled : undefined;
            inputs["ingressShapingPeakBandwidth"] = args ? args.ingressShapingPeakBandwidth : undefined;
            inputs["lacpEnabled"] = args ? args.lacpEnabled : undefined;
            inputs["lacpMode"] = args ? args.lacpMode : undefined;
            inputs["livePortMovingAllowed"] = args ? args.livePortMovingAllowed : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["netflowEnabled"] = args ? args.netflowEnabled : undefined;
            inputs["netflowOverrideAllowed"] = args ? args.netflowOverrideAllowed : undefined;
            inputs["networkResourcePoolKey"] = args ? args.networkResourcePoolKey : undefined;
            inputs["networkResourcePoolOverrideAllowed"] = args ? args.networkResourcePoolOverrideAllowed : undefined;
            inputs["notifySwitches"] = args ? args.notifySwitches : undefined;
            inputs["numberOfPorts"] = args ? args.numberOfPorts : undefined;
            inputs["portConfigResetAtDisconnect"] = args ? args.portConfigResetAtDisconnect : undefined;
            inputs["portNameFormat"] = args ? args.portNameFormat : undefined;
            inputs["portPrivateSecondaryVlanId"] = args ? args.portPrivateSecondaryVlanId : undefined;
            inputs["securityPolicyOverrideAllowed"] = args ? args.securityPolicyOverrideAllowed : undefined;
            inputs["shapingOverrideAllowed"] = args ? args.shapingOverrideAllowed : undefined;
            inputs["standbyUplinks"] = args ? args.standbyUplinks : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["teamingPolicy"] = args ? args.teamingPolicy : undefined;
            inputs["trafficFilterOverrideAllowed"] = args ? args.trafficFilterOverrideAllowed : undefined;
            inputs["txUplink"] = args ? args.txUplink : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["uplinkTeamingOverrideAllowed"] = args ? args.uplinkTeamingOverrideAllowed : undefined;
            inputs["vlanId"] = args ? args.vlanId : undefined;
            inputs["vlanOverrideAllowed"] = args ? args.vlanOverrideAllowed : undefined;
            inputs["vlanRanges"] = args ? args.vlanRanges : undefined;
            inputs["configVersion"] = undefined /*out*/;
            inputs["key"] = undefined /*out*/;
        }
        super("vsphere:index/distributedPortGroup:DistributedPortGroup", name, inputs, opts);
    }
}
exports.DistributedPortGroup = DistributedPortGroup;
//# sourceMappingURL=distributedPortGroup.js.map