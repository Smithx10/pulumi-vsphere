/**
 * SerializeFunctionArgs are arguments used to serialize a JavaScript function
 */
export interface SerializeFunctionArgs {
    /**
     * The name to export from the module defined by the generated module text.  Defaults to 'handler'.
     */
    exportName?: string;
    /**
     * A function to prevent serialization of certain objects captured during the serialization.  Primarily used to
     * prevent potential cycles.
     */
    serialize?: (o: any) => boolean;
}
/**
 * SerializeFunction is a representation of a serialized JavaScript function.
 */
export interface SerializedFunction {
    /**
     * The text of a JavaScript module which exports a single name bound to a function value matching the serialized
     * JavaScript function.
     */
    text: string;
    /**
     * The name of the exported module member.
     */
    exportName: string;
    /**
     * The set of pacakges that were 'require'd by the transitive closure of functions serialized as part of the
     * JavaScript function serialization.  These pacakges must be able to resolve in the target execution environment
     * for the serialized function to be able to be loaded and evaluated correctly.
     */
    requiredPackages: Set<string>;
}
/**
 * serializeFunction serializes a JavaScript function into a text form that can be loaded in another exuection context,
 * for example as part of a function callback associated with an AWS Lambda.  The function serialization captures any
 * variables captured by the function body and serializes those values into the generated text along with the function
 * body.  This process is recursive, so that functions referenced by the body of the serialized function will themselves
 * be serialized as well.  Thid process also deeply serializes captured object values, including prototype chains and
 * property descriptors, such that the semantics of the function when deserialized should match the original function.
 *
 * There are several known limitations:
 * - If a native function is captured either directly or indirectly, closure serialization will return an error.
 * - Captured values will be serialized based on their values at the time that `serializeFunction` is called.  Mutations
 *   to these values after that (but before the deserialized funtion is used) will not be observed by the deserialized
 *   function.
 *
 * @param func The JavaScript function to serialize.
 * @param args Arguments to use to control the serialization of the JavaScript function.
 */
export declare function serializeFunction(func: Function, args?: SerializeFunctionArgs): Promise<SerializedFunction>;
/**
 * @deprecated This function has been replaced by `serializeFunction`, which accepts additional parameters and returns
 * more details about the serialized function.  This form will be removed in a future release of this package.
 */
export declare function serializeFunctionAsync(func: Function, serialize?: (o: any) => boolean): Promise<string>;
